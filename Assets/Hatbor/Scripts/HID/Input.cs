//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Hatbor/InputActions/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Hatbor.HID
{
    public partial class @Input: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Input()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""b92e5acc-9660-4813-8465-99a2211f0dc7"",
            ""actions"": [
                {
                    ""name"": ""MoveKeyboard"",
                    ""type"": ""Value"",
                    ""id"": ""a0595148-4007-44cc-b3a3-b104d8268fc7"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovePointer"",
                    ""type"": ""Value"",
                    ""id"": ""dd1bc0c6-6214-4244-9b2d-7a9dd0a21e20"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveWheel"",
                    ""type"": ""Value"",
                    ""id"": ""b8ac5979-09dd-464d-9679-9f12743bbb28"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookPointer"",
                    ""type"": ""Value"",
                    ""id"": ""4dd86164-38d0-4f5d-871b-cc498eaba4c4"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""96f1ec86-a4f1-415c-847d-a7ae3680e577"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeyboard"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ae466364-97bc-494b-94b3-7ba2a2f67803"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""179f43b2-8540-4578-b586-0bd017f76cf6"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6a6bc969-b34d-4514-ac6b-3c0cab7c093f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d1e84609-44a2-4b47-b67b-741f0da0e07e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""574ed93b-2469-4ea9-86c3-d0f936ac9e4f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""ed7149ea-5b53-4e6f-990e-9cbee5d047d3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""e2843fc9-3550-49d3-8ce6-3fa6b385ecee"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookPointer"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""d6b41d20-8e01-4fb1-a184-c805d10e7507"",
                    ""path"": ""*/{SecondaryAction}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookPointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""29291b93-3b53-46af-b977-b336814bb97b"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookPointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""592693f2-d8dc-4a28-bfeb-25a974ccc9c0"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.01,y=0.01)"",
                    ""groups"": """",
                    ""action"": ""MovePointer"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""dd923e8a-adb1-4d1a-98fa-ccf1f9b211be"",
                    ""path"": ""*/{PrimaryAction}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""cabac39c-3c3d-4c37-b4d2-3a87f52aa70b"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e595201d-7c01-4606-8a05-7185676fa378"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=0.01)"",
                    ""groups"": """",
                    ""action"": ""MoveWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Camera
            m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
            m_Camera_MoveKeyboard = m_Camera.FindAction("MoveKeyboard", throwIfNotFound: true);
            m_Camera_MovePointer = m_Camera.FindAction("MovePointer", throwIfNotFound: true);
            m_Camera_MoveWheel = m_Camera.FindAction("MoveWheel", throwIfNotFound: true);
            m_Camera_LookPointer = m_Camera.FindAction("LookPointer", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Camera
        private readonly InputActionMap m_Camera;
        private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
        private readonly InputAction m_Camera_MoveKeyboard;
        private readonly InputAction m_Camera_MovePointer;
        private readonly InputAction m_Camera_MoveWheel;
        private readonly InputAction m_Camera_LookPointer;
        public struct CameraActions
        {
            private @Input m_Wrapper;
            public CameraActions(@Input wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveKeyboard => m_Wrapper.m_Camera_MoveKeyboard;
            public InputAction @MovePointer => m_Wrapper.m_Camera_MovePointer;
            public InputAction @MoveWheel => m_Wrapper.m_Camera_MoveWheel;
            public InputAction @LookPointer => m_Wrapper.m_Camera_LookPointer;
            public InputActionMap Get() { return m_Wrapper.m_Camera; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
            public void AddCallbacks(ICameraActions instance)
            {
                if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
                @MoveKeyboard.started += instance.OnMoveKeyboard;
                @MoveKeyboard.performed += instance.OnMoveKeyboard;
                @MoveKeyboard.canceled += instance.OnMoveKeyboard;
                @MovePointer.started += instance.OnMovePointer;
                @MovePointer.performed += instance.OnMovePointer;
                @MovePointer.canceled += instance.OnMovePointer;
                @MoveWheel.started += instance.OnMoveWheel;
                @MoveWheel.performed += instance.OnMoveWheel;
                @MoveWheel.canceled += instance.OnMoveWheel;
                @LookPointer.started += instance.OnLookPointer;
                @LookPointer.performed += instance.OnLookPointer;
                @LookPointer.canceled += instance.OnLookPointer;
            }

            private void UnregisterCallbacks(ICameraActions instance)
            {
                @MoveKeyboard.started -= instance.OnMoveKeyboard;
                @MoveKeyboard.performed -= instance.OnMoveKeyboard;
                @MoveKeyboard.canceled -= instance.OnMoveKeyboard;
                @MovePointer.started -= instance.OnMovePointer;
                @MovePointer.performed -= instance.OnMovePointer;
                @MovePointer.canceled -= instance.OnMovePointer;
                @MoveWheel.started -= instance.OnMoveWheel;
                @MoveWheel.performed -= instance.OnMoveWheel;
                @MoveWheel.canceled -= instance.OnMoveWheel;
                @LookPointer.started -= instance.OnLookPointer;
                @LookPointer.performed -= instance.OnLookPointer;
                @LookPointer.canceled -= instance.OnLookPointer;
            }

            public void RemoveCallbacks(ICameraActions instance)
            {
                if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICameraActions instance)
            {
                foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CameraActions @Camera => new CameraActions(this);
        public interface ICameraActions
        {
            void OnMoveKeyboard(InputAction.CallbackContext context);
            void OnMovePointer(InputAction.CallbackContext context);
            void OnMoveWheel(InputAction.CallbackContext context);
            void OnLookPointer(InputAction.CallbackContext context);
        }
    }
}
